@{
    Layout = null; /* Déjalo así si esta vista es independiente.
              Si quieres convertirla en layout, reemplaza el cuerpo por @RenderBody() en #app-content */
    ViewData["Title"] = "Dashboard";
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - Hotel Oasis</title>

    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
    <script src="/lib/jquery/jquery.min.js"></script>
    <script src="/lib/jquery-validation/jquery.validate.min.js"></script>
    <script src="/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <link rel="stylesheet" href="~/css/dashboard.css" />

</head>
<body>

    <!-- ======= HEADER ======= -->
    <header class="app-header">
        <div class="header-left">
            <button id="btnSidebar" class="burger-btn" aria-label="Abrir menú">
                <i class="bi bi-list"></i>
            </button>
        </div>

        <div class="header-center">
            <img src="/img/login/logo-oasis.png" class="brand-logo" alt="Hotel Oasis" />
        </div>

        <div class="header-right">
            @* @using System.Security.Claims
            @{
                var avatar = User.FindFirst("avatar")?.Value ?? Url.Content("~/img/DefaultUsuario.png");
                var userName = User.Identity?.Name ?? "";
                var roleName = User.FindFirstValue(ClaimTypes.Role) ?? "";
            } *@

            @using System.Security.Claims
            @{
                // Id del usuario (ajusta al claim que realmente usas)
                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) 
                             ?? User.FindFirst("userid")?.Value;

                var avatarUrl = !string.IsNullOrWhiteSpace(userId)
                ? Url.Action("Avatar", "Usuarios", new { id = userId }) + "?v=" + DateTimeOffset.UtcNow.ToUnixTimeSeconds()
                : Url.Content("~/img/DefaultUsuario.png");
                var userName = User.Identity?.Name ?? "";
                var roleName = User.FindFirstValue(ClaimTypes.Role) ?? "";
            }
            <div class="dropdown">
                <a href="#" class="d-flex align-items-center text-decoration-none"
                   id="userMenu" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="@avatarUrl" class="avatar rounded-circle" alt="Usuario" />
                    <div class="ms-2 d-none d-sm-block">
                        <div>@userName</div>
                        <div class="role">@roleName</div>
                    </div>
                    <i class="bi bi-chevron-down ms-2 d-none d-sm-inline"></i>
                </a>
                <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="userMenu" style="min-width:220px;">
                    <li class="dropdown-header">
                        <div class="fw-semibold">@userName</div>
                        <div class="text-muted small">@roleName</div>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li class="px-3 pb-2">
                        <form method="post" action="/Login/Salir">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-sm btn-outline-danger w-100">
                                <i class="bi bi-box-arrow-right"></i> Cerrar sesión
                            </button>
                        </form>
                    </li>
                </ul>
            </div>
        </div>
    </header>

    <div class="app-shell d-flex">
        <!-- ======= SIDEBAR ======= -->
        <nav id="appSidebar" class="sidebar">
            <ul class="menu">
                <li class="active">
                    <a href="/Home/Dashboard" data-url="/Home/Dashboard" data-home="1">
                        <i class="bi bi-house-door"></i> <span>Inicio</span>
                    </a>
                </li>

                <li>
                    <a href="/Reservas/Index" data-url="/Reservas/Index">
                        <i class="bi bi-calendar-check"></i> <span>Reservaciones</span>
                    </a>
                </li>

                <!-- REPORTES -->
                <li class="has-children">
                    <a href="#" class="toggle" data-toggle="submenu">
                        <i class="bi bi-bar-chart"></i> <span>Reportes</span>
                        <i class="bi bi-caret-down-fill caret"></i>
                    </a>
                    <ul class="submenu">
                        <li><a href="/Reportes/Reservas" data-url="/Reportes/Reservas"><span>Reporte de reservas</span></a></li>
                        <li><a href="/Reportes/PagosIngresos" data-url="/Reportes/PagosIngresos"><span>Reporte de pagos / ingresos</span></a></li>
                        <li><a href="/Reportes/Clientes" data-url="/Reportes/Clientes"><span>Reporte de Clientes</span></a></li>
                    </ul>
                </li>

                <!-- HABITACIONES -->
                <li class="has-children">
                    <a href="#" class="toggle" data-toggle="submenu">
                        <i class="bi bi-door-open"></i> <span>Habitaciones</span>
                        <i class="bi bi-caret-down-fill caret"></i>
                    </a>
                    <ul class="submenu">
                        <li><a href="/habitaciones/Index" data-url="/habitaciones/Index"><span>Habitaciones</span></a></li>
                        <li><a href="/TiposHabitacion/Index" data-url="/TiposHabitacion/Index"><span>Tipo de Habitación</span></a></li>
                    </ul>
                </li>

                <li>
                    <a href="/Clientes/Index" data-url="/Clientes/Index">
                        <i class="bi bi-people"></i> <span>Clientes</span>
                    </a>
                </li>

                <!-- EMPLEADOS -->
                <li class="has-children">
                    <a href="#" class="toggle" data-toggle="submenu">
                        <i class="bi bi-person-badge"></i> <span>Empleados</span>
                        <i class="bi bi-caret-down-fill caret"></i>
                    </a>
                    <ul class="submenu">
                        <li><a href="/Empleados/Index" data-url="/Empleados/Index"><span>Empleados</span></a></li>
                        <li><a href="/Puestos/Index" data-url="/Puestos/Index"><span>Puestos</span></a></li>
                    </ul>
                </li>

                <!-- USUARIOS -->
                <li class="has-children">
                    <a href="#" class="toggle" data-toggle="submenu">
                        <i class="bi bi-person"></i> <span>Usuarios</span>
                        <i class="bi bi-caret-down-fill caret"></i>
                    </a>
                    <ul class="submenu">
                        <li><a href="/Usuarios/Index" data-url="/Usuarios/Index"><span>Usuarios</span></a></li>
                        <li><a href="/Roles/Index" data-url="/Roles/Index"><span>Roles</span></a></li>
                    </ul>
                </li>

                <li>
                    <a href="/Caja/Index" data-url="/Caja/Index">
                        <i class="bi bi-cash-stack"></i> <span>Caja</span>
                    </a>
                </li>

                <!-- CONFIGURACIONES -->
                <li class="has-children">
                    <a href="#" class="toggle" data-toggle="submenu">
                        <i class="bi bi-gear"></i> <span>Configuraciones</span>
                        <i class="bi bi-caret-down-fill caret"></i>
                    </a>
                    <ul class="submenu">
                        <li><a href="/Configuraciones/Modulos" data-url="/Configuraciones/Modulos"><span>Módulos</span></a></li>
                        <li><a href="/Configuraciones/Permisos" data-url="/Configuraciones/Permisos"><span>Permisos</span></a></li>
                        <li><a href="/TipoDocumentos/Index" data-url="/TipoDocumentos/Index"><span>Tipos de documento</span></a></li>
                    </ul>
                </li>
            </ul>
        </nav>


        <!-- Overlay móvil -->
        <div id="menuBackdrop" class="backdrop"></div>

        <!-- ======= CONTENT ======= -->
        <main id="appContent" class="app-content flex-grow-1">
            <!-- Hero inicial (como en tu prototipo) -->
            <div id="hero" class="hero"></div>

            <!-- Contenedor donde se insertará el HTML cargado -->
            @* <div id="contentHost" class="mt-3"></div> *@
            <div id="contentHost"></div>
        </main>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>

        // ---- Cerrar y limpiar cualquier modal/backdrop de Bootstrap ----
function cleanupModals() {
  try {
    document.querySelectorAll('.modal.show').forEach(el => {
      try { bootstrap.Modal.getInstance(el)?.hide(); } catch {}
    });
    document.querySelectorAll('.modal-backdrop').forEach(b => b.remove());
    document.body.classList.remove('modal-open');
    document.body.style.removeProperty('padding-right');
  } catch {}
}


/* ======= jQuery Validate: defaults globales ======= */
(function () {
  if (!(window.jQuery && $.validator)) return;

  $.validator.setDefaults({
    onkeyup: function (element) { $(element).valid(); },
    onclick: function (element) { $(element).valid(); },
    onfocusout: function (element) { $(element).valid(); },

    highlight: function (element) {
      $(element).addClass('is-invalid input-validation-error').removeClass('is-valid');
    },
    unhighlight: function (element) {
      $(element).removeClass('is-invalid input-validation-error is-valid');
      const $c = $(element.form).find('[data-valmsg-for="' + element.name + '"]');
      $c.text('').removeClass('field-validation-error text-danger d-block').addClass('field-validation-valid');
    },
    errorClass: 'text-danger',
    errorPlacement: function (error, element) {
      const $c = $(element.form).find('[data-valmsg-for="' + element.attr('name') + '"]');
      if ($c.length) { $c.addClass('d-block').html('').append(error); }
      else { error.insertAfter(element); }
    }
  });
})();

/* Re-parsea unobtrusive en formularios dinámicos */
function wireUpValidation(scope) {
  if (!(window.jQuery && $.validator && $.validator.unobtrusive)) return;
  $(scope).find('form').each(function () {
    const $f = $(this);
    $f.removeData('validator').removeData('unobtrusiveValidation');
    $.validator.unobtrusive.parse($f);
  });
}

/* Utilidad: limpiar mensaje/clases de UN campo */
function clearOneField(el) {
  if (!el || !el.form) return;
  el.classList.remove('is-invalid', 'input-validation-error', 'is-valid');
  const span = el.form.querySelector('[data-valmsg-for="' + CSS.escape(el.name) + '"]');
  if (span) {
    span.textContent = '';
    span.classList.remove('field-validation-error', 'text-danger', 'd-block');
    span.classList.add('field-validation-valid');
  }
}

/* ================= Sidebar & Layout ================= */
const sidebar = document.getElementById('appSidebar');
const backdrop = document.getElementById('menuBackdrop');
const btnSidebar = document.getElementById('btnSidebar');

function openSidebar() {
  sidebar?.classList.add('open');
  if (window.matchMedia('(max-width: 991.98px)').matches) backdrop?.classList.add('show');
  document.body.classList.add('sidebar-open');
  localStorage.setItem('sidebar-open', '1');
}
function closeSidebar() {
  sidebar?.classList.remove('open');
  backdrop?.classList.remove('show');
  document.body.classList.remove('sidebar-open');
  localStorage.setItem('sidebar-open', '0');
}
function toggleSidebar() { sidebar?.classList.contains('open') ? closeSidebar() : openSidebar(); }

(function restoreSidebar() {
  const saved = localStorage.getItem('sidebar-open');
  if (saved === '1' && window.matchMedia('(min-width: 992px)').matches) openSidebar();
  else document.body.classList.remove('sidebar-open');
})();

btnSidebar?.addEventListener('click', toggleSidebar);
backdrop?.addEventListener('click', closeSidebar);

// Submenús en acordeón
document.querySelectorAll('.menu .has-children > a[data-toggle="submenu"]').forEach(tg => {
  tg.addEventListener('click', (e) => {
    e.preventDefault();
    const li = tg.closest('.has-children');
    const isOpen = li.classList.contains('open');
    document.querySelectorAll('.menu .has-children.open').forEach(o => { if (o !== li) o.classList.remove('open'); });
    li.classList.toggle('open', !isOpen);
  });
});

/* ================= Router ÚNICO para #contentHost ================= */
(function () {
  const host = document.getElementById('contentHost');
  const hero = document.getElementById('hero');
  if (!host) return;

  function showModalFromHost(modalEl, fallbackMsg) {
    try {
      if (!modalEl) { if (fallbackMsg) alert(fallbackMsg); return; }
      if (!window.bootstrap || typeof bootstrap.Modal !== 'function') {
        if (fallbackMsg) alert(fallbackMsg);
        return;
      }
      const inst = bootstrap.Modal.getOrCreateInstance(modalEl);
      inst.show();
    } catch (err) {
      console.error('showModalFromHost error:', err);
      if (fallbackMsg) alert(fallbackMsg);
    }
  }

  async function loadToHost(url, opts) {
    const resp = await fetch(url, Object.assign({
      headers: { 'X-Requested-With': 'XMLHttpRequest' },
      credentials: 'same-origin'
    }, opts || {}));

    const ctype = (resp.headers.get('content-type') || '').toLowerCase();

    if (ctype.includes('application/json')) {
      const data = await resp.json();

      if (data.ok) {
        const okEl = host.querySelector('#saveOkModal');
        if (okEl) {
          showModalFromHost(okEl);
          if (data.redirectUrl) okEl.addEventListener('hidden.bs.modal', () => { loadToHost(data.redirectUrl); }, { once: true });
        } else if (data.redirectUrl) {
          await loadToHost(data.redirectUrl);
        }
        return;
      }

      if (data.reason === 'nochanges') {
        const warnEl = host.querySelector('#noChangesModal');
        if (warnEl) {
          const msg = warnEl.querySelector('.js-msg');
          if (msg && data.message) msg.textContent = data.message;
          showModalFromHost(warnEl);
        } else {
          showModalFromHost(warnEl, data.message || 'No has modificado ningún campo.');
        }
        return;
      }

      if (data.errors) {
        const anyForm = host.querySelector('form');
        if (anyForm) showFieldErrors(anyForm, data.errors);
        return;
      }

      console.error(data.message || 'Ocurrió un problema.');
      return;
    }

    if (!resp.ok) { window.location.href = url; return; }
    const html = await resp.text();
    if (hero) hero.style.display = 'none';

    if (window.swapContentIntoHost) window.swapContentIntoHost(html);
    else host.innerHTML = html;

    wireUpValidation(host);
    initPageFeatures(host);
  }

  // Menú lateral: enlaces con data-url
  document.querySelectorAll('.menu a[data-url]').forEach(a => {
  a.addEventListener('click', (ev) => {
    ev.preventDefault();
    const url = a.dataset.url || a.href;

    // --- Inicio: mostrar hero y limpiar el host ---
    if (a.dataset.home === '1' || url.endsWith('/Home/Index')) {
      const host = document.getElementById('contentHost');
      const hero = document.getElementById('hero');
      if (host) host.innerHTML = '';
      if (hero) hero.style.display = '';  // vuelve a mostrar el hero
      history.replaceState(null, '', url); // opcional: actualiza la URL
      return; // importante: no llames a loadToHost
    }

    // Resto de opciones: carga parcial por AJAX
    loadToHost(url);
  });
});

  // document.querySelectorAll('.menu a[data-url]').forEach(a => {
  //   a.addEventListener('click', (ev) => {
  //     ev.preventDefault();
  //     loadToHost(a.dataset.url || a.href);
  //   });
  // });

  // Delegación de CLICS dentro del host
  host.addEventListener('click', (ev) => {
    const askBtn = ev.target.closest('#btnAsk');
    if (askBtn) {
      ev.preventDefault();
      const modalEl = host.querySelector('#confirmDeleteModal');
      if (modalEl) bootstrap.Modal.getOrCreateInstance(modalEl).show();
      return;
    }
    // const confirmBtn = ev.target.closest('#btnConfirm');
    // if (confirmBtn) {
    //   ev.preventDefault();
    //   const form = host.querySelector('#frmDelete');
    //   if (form?.requestSubmit) form.requestSubmit(); else form?.submit();
    //   return;
    // }
    const confirmBtn = ev.target.closest('#btnConfirm');
    if (confirmBtn) {
      ev.preventDefault();
      // Cierra el modal ANTES de enviar
      const modalEl = host.querySelector('#confirmDeleteModal');
      if (modalEl && window.bootstrap) {
        try { bootstrap.Modal.getOrCreateInstance(modalEl).hide(); } catch {}
      }
      cleanupModals();

      const form = host.querySelector('#frmDelete');
      if (form?.requestSubmit) form.requestSubmit(); else form?.submit();
      return;
    }
    const a = ev.target.closest('a[data-url], a.ajax-nav[data-url]');
    if (a) { ev.preventDefault(); loadToHost(a.dataset.url || a.href); }
  });

  /* ----- Helpers errores por campo (para respuestas JSON con errors) ----- */
  function clearFieldErrors(form) {
    form.querySelectorAll('[data-valmsg-for]').forEach(sp => {
      sp.textContent = '';
      sp.classList.remove('field-validation-error', 'text-danger', 'invalid-feedback', 'd-block');
      sp.classList.add('field-validation-valid');
    });
    form.querySelectorAll('.is-invalid, .input-validation-error').forEach(el => el.classList.remove('is-invalid', 'input-validation-error'));
  }
  function showFieldErrors(form, errors) {
    let first = null;
    for (const key in errors) {
      const msgs = errors[key];
      const span = form.querySelector('[data-valmsg-for="' + key + '"]');
      if (span) {
        span.textContent = msgs.join(' ');
        span.classList.remove('field-validation-valid');
        span.classList.add('field-validation-error', 'text-danger', 'd-block');
      }
      const ctrl = form.querySelector('[name="' + key + '"]');
      if (ctrl) {
        ctrl.classList.add('is-invalid', 'input-validation-error');
        if (!first) first = ctrl;
      }
    }
    if (first) first.focus({ preventScroll: false });
  }

  // --- Delegación de formularios AJAX dentro del host (CON manejo 400/500) ---
  host.addEventListener('submit', async (ev) => {
    const form = ev.target.closest('form');
    if (!form) return;
    ev.preventDefault();

    // Limpia errores previos
    form.querySelectorAll('[data-valmsg-for]').forEach(sp => {
      // sp.textContent = '';
      sp.classList.remove('field-validation-error','text-danger','invalid-feedback','d-block');
      sp.classList.add('field-validation-valid');
    });
    form.querySelectorAll('.is-invalid, .input-validation-error')
        .forEach(el => el.classList.remove('is-invalid','input-validation-error'));

    // Validación cliente opcional
    try {
      if (window.jQuery && $.validator) {
        const $f = $(form);
        if (!$f.data('validator')) {
          $f.removeData('validator').removeData('unobtrusiveValidation');
          $.validator.unobtrusive && $.validator.unobtrusive.parse($f);
        }
        if (!$f.valid()) return;
      }
    } catch {}

    const fd = new FormData(form);
    const token = form.querySelector('input[name="__RequestVerificationToken"]')?.value;
    const headers = { 'X-Requested-With': 'XMLHttpRequest' };
    if (token) headers['RequestVerificationToken'] = token;

    const resp = await fetch(form.action, {
      method: form.method || 'POST',
      body: fd,
      headers,
      credentials: 'same-origin',
      redirect: 'follow'
    });

    // --- Manejo explícito de 400/500 antes de leer como éxito ---
    if (!resp.ok) {
      const ct = (resp.headers.get('content-type') || '').toLowerCase();
      const rawErr = await resp.text();
      if (ct.includes('application/json')) {
        try {
          const dataErr = JSON.parse(rawErr);
          if (dataErr.errors) {
            for (const key in dataErr.errors) {
              const msgs = dataErr.errors[key];
              const span = form.querySelector('[data-valmsg-for="' + key + '"]');
              if (span) {
                span.textContent = msgs.join(' ');
                span.classList.remove('field-validation-valid');
                span.classList.add('field-validation-error','text-danger','d-block');
              }
              const ctrl = form.querySelector('[name="' + key + '"]');
              if (ctrl) ctrl.classList.add('is-invalid','input-validation-error');
            }
            return;
          }
          alert(dataErr.message || ('Error ' + resp.status));
          return;
        } catch {
          console.error(rawErr);
          alert('Error ' + resp.status);
          return;
        }
      } else {
        const host = document.getElementById('contentHost');
        if (host) {
          host.innerHTML = rawErr;
          // re-ejecutar scripts embebidos
          host.querySelectorAll('script').forEach(old => {
            const s = document.createElement('script');
            if (old.src) { s.src = old.src; s.async = false; }
            else { s.text = old.textContent; }
            document.head.appendChild(s);
            old.remove();
          });
          wireUpValidation(host);
          initPageFeatures(host);
        } else {
          document.open(); document.write(rawErr); document.close();
        }
        return;
      }
    }

    // --- Éxito (200) → JSON o HTML
    const raw = await resp.text();
    let data = null;
    try { data = JSON.parse(raw); } catch {}

    if (data) {
      if (data.ok) {

        // // 1) si hay URL de retorno, SIEMPRE recarga el parcial por AJAX
        // if (data.redirectUrl) {
        //     await loadToHost(data.redirectUrl);
        // }
        // // 2) opcional: muestra modal de éxito si existe
        // const okEl = document.getElementById('saveOkModal');
        // if (okEl && window.bootstrap) {
        //     bootstrap.Modal.getOrCreateInstance(okEl).show();
        // }

        // lo que debe ocurrir DESPUÉS del modal
        const doReload = async () => {
        if (data.redirectUrl) {
            cleanupModals();              // por si quedó algún backdrop
            await loadToHost(data.redirectUrl);  // recarga el parcial en #contentHost
        }
        };

        // si existe un modal de éxito, muéstralo y recarga al cerrarlo
        const okEl = document.getElementById('saveOkModal');
        if (okEl && window.bootstrap) {
        okEl.addEventListener('hidden.bs.modal', () => { doReload(); }, { once: true });
        bootstrap.Modal.getOrCreateInstance(okEl).show();
        } else {
        // si no hay modal de éxito, recarga directo
        await doReload();
        }

        // const okEl = document.getElementById('saveOkModal');
        // if (okEl && window.bootstrap) {
        //   const inst = bootstrap.Modal.getOrCreateInstance(okEl);
        //   inst.show();
        //   if (data.redirectUrl) okEl.addEventListener('hidden.bs.modal', () => {
        //     const host = document.getElementById('contentHost');
        //     if (host) {
        //       fetch(data.redirectUrl, { headers: { 'X-Requested-With':'XMLHttpRequest' } })
        //         .then(r => r.text()).then(html => { host.innerHTML = html; wireUpValidation(host); initPageFeatures(host); });
        //     } else {
        //       window.location.href = data.redirectUrl;
        //     }
        //   }, { once: true });
        // } else if (data.redirectUrl) {
        //   window.location.href = data.redirectUrl;
        // }
        return;
      }
      if (data.reason === 'nochanges') {
        const warnEl = document.getElementById('noChangesModal');
        if (warnEl && window.bootstrap) {
          const msg = warnEl.querySelector('.js-msg');
          if (msg && data.message) msg.textContent = data.message;
          bootstrap.Modal.getOrCreateInstance(warnEl).show();
        } else {
          alert(data.message || 'No has modificado ningún campo.');
        }
        return;
      }
      if (data.errors) {
        for (const key in data.errors) {
          const msgs = data.errors[key];
          const span = form.querySelector('[data-valmsg-for="' + key + '"]');
          if (span) {
            span.textContent = msgs.join(' ');
            span.classList.remove('field-validation-valid');
            span.classList.add('field-validation-error','text-danger','d-block');
          }
          const ctrl = form.querySelector('[name="' + key + '"]');
          if (ctrl) ctrl.classList.add('is-invalid','input-validation-error');
        }
        return;
      }
      if (data.message) { alert(data.message); return; }
    }

    // HTML (validaciones servidor, etc.)
    if (host) {
        cleanupModals();

      host.innerHTML = raw;
      host.querySelectorAll('script').forEach(old => {
        const s = document.createElement('script');
        if (old.src) { s.src = old.src; s.async = false; }
        else { s.text = old.textContent; }
        document.head.appendChild(s);
        old.remove();
      });
      wireUpValidation(host);
      initPageFeatures(host);
      window.scrollTo(0, 0);
      cleanupModals();

    } else {
      document.open(); document.write(raw); document.close();
    }
  });

  // Exponer utilidad para reemplazar solo un fragmento
  window.swapInHost = async function swapInHost(url, selector) {
    const host = document.getElementById('contentHost');
    const resp = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
    if (!resp.ok) { window.location.href = url; return; }
    const html = await resp.text();
    const tmp = document.createElement('div'); tmp.innerHTML = html;
    const newNode = tmp.querySelector(selector);
    const oldNode = host.querySelector(selector);
    if (newNode && oldNode) oldNode.replaceWith(newNode);
  };

  /* ==== Validación reactiva en TODOS los inputs dentro de #contentHost ==== */
  host.addEventListener('input', (ev) => {
    const el = ev.target;
    if (!(el instanceof HTMLInputElement || el instanceof HTMLSelectElement || el instanceof HTMLTextAreaElement)) return;

    if (window.jQuery && $(el.form).data('validator')) {
      const ok = $(el).valid();
      if (ok) clearOneField(el);
      return;
    }

    const isRequired = el.hasAttribute('data-val') && el.hasAttribute('data-val-required');
    if (isRequired && (el.value || '').trim() !== '') {
      clearOneField(el);
    }
  });

})();

/* Atajo Ctrl+B para abrir/cerrar el sidebar */
document.addEventListener('keydown', (e) => {
  if (e.ctrlKey && (e.key === 'b' || e.key === 'B')) { e.preventDefault(); toggleSidebar(); }
});

/* ==== Autofiltros de Puestos (delegado en #contentHost) ==== */
(function () {
  const host = document.getElementById('contentHost');
  if (!host) return;

  const debounce = (fn, ms = 400) => { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), ms); } };

  function buildUrl() {
    const form = host.querySelector('#frmFiltros');
    if (!form) return null;
    const endpoint = form.dataset.endpoint || '/';
    const codigo = form.querySelector('#fCodigo')?.value.trim() || '';
    const nombre = form.querySelector('#fNombre')?.value.trim() || '';
    const estado = form.querySelector('#fEstado')?.value ?? '';

    const qs = new URLSearchParams();
    if (codigo) qs.set('codigo', codigo);
    if (nombre) qs.set('nombre', nombre);
    qs.set('estado', estado);

    return endpoint + (qs.toString() ? '?' + qs.toString() : '');
  }

  const run = debounce(async () => {
    const url = buildUrl();
    if (!url) return;

    const active = document.activeElement;
    const id = active?.id;
    const selStart = ('selectionStart' in active) ? active.selectionStart : null;
    const selEnd = ('selectionEnd' in active) ? active.selectionEnd : null;

    await window.swapInHost(url, '#printArea');
    history.replaceState(null, '', url);
    window.initPuestosPager(host.querySelector('#printArea'));

    if (id) {
      const el = host.querySelector('#' + CSS.escape(id));
      if (el) {
        el.focus();
        if (selStart != null && selEnd != null && el.setSelectionRange) el.setSelectionRange(selStart, selEnd);
      }
    }
  }, 400);

  host.addEventListener('input', (ev) => {
    const id = ev.target?.id;
    const v = ev.target?.value?.trim?.() || '';
    if ((id === 'fCodigo' || id === 'fNombre') && (v.length === 0 || v.length >= 2)) run();
  });

  host.addEventListener('change', (ev) => { if (ev.target?.id === 'fEstado') run(); });

  host.addEventListener('click', (ev) => {
    const btn = ev.target.closest('#btnPrint');
    if (!btn) return;

    const form = host.querySelector('#frmFiltros');
    const endpoint = form?.dataset.report || (form?.dataset.endpoint?.replace('/Index', '/ExportPdf')) || '';
    if (!endpoint) return;

    const qs = new URLSearchParams();
    const cod = form.querySelector('#fCodigo')?.value.trim() || '';
    const nom = form.querySelector('#fNombre')?.value.trim() || '';
    const est = form.querySelector('#fEstado')?.value ?? '';
    if (cod) qs.set('codigo', cod);
    if (nom) qs.set('nombre', nom);
    qs.set('estado', est);

    window.open(endpoint + (qs.toString() ? '?' + qs.toString() : ''), '_blank');
  });
})();

/* ========== Init extra de páginas ========== */
function initPageFeatures(host) {
  const area = host.querySelector('#printArea');
  if (area) window.initPuestosPager(area);
  setupPasswordUi(host);
}

function setupPasswordUi(scope) {
  const pwd = scope.querySelector('#NuevaContrasena, input[name="NuevaContrasena"]');
  const confirm = scope.querySelector('#ConfirmarContrasena, input[name="ConfirmarContrasena"]');
  const list = scope.querySelector('#pwChecklist');
  const matchMsg = scope.querySelector('#pwMatchMsg');
  if (!pwd || !list) return;

  const req = (sel) => list?.querySelector(sel);
  const setItem = (el, ok) => {
    if (!el) return;
    el.classList.toggle('pw-ok', ok);
    el.classList.toggle('pw-bad', !ok);
    const i = el.querySelector('i');
    if (i) i.className = ok ? 'bi bi-check-circle-fill me-1' : 'bi bi-x-circle-fill me-1';
  };

  const checkPwd = () => {
    const v = pwd.value || '';
    const okLower = /[a-z]/.test(v);
    const okUpper = /[A-Z]/.test(v);
    const okDigit = /\d/.test(v);
    const okLen = v.length >= 8 && v.length <= 15;

    setItem(req('[data-req="lower"]'), okLower);
    setItem(req('[data-req="upper"]'), okUpper);
    setItem(req('[data-req="digit"]'), okDigit);
    setItem(req('[data-req="len"]'), okLen);

    const allOk = okLower && okUpper && okDigit && okLen;
    pwd.classList.toggle('is-valid', allOk && v.length > 0);
    pwd.classList.toggle('is-invalid', !allOk && v.length > 0);
  };

  const checkMatch = () => {
    if (!confirm || !matchMsg) return;
    const a = pwd.value || '';
    const b = confirm.value || '';
    if (!b) {
      confirm.classList.remove('is-valid', 'is-invalid');
      matchMsg.textContent = '';
      matchMsg.classList.remove('text-success', 'text-danger');
      return;
    }
    const same = a === b;
    confirm.classList.toggle('is-valid', same);
    confirm.classList.toggle('is-invalid', !same);
    matchMsg.textContent = same ? 'Las contraseñas coinciden' : 'Las contraseñas no coinciden';
    matchMsg.classList.toggle('text-success', same);
    matchMsg.classList.toggle('text-danger', !same);
  };

  pwd.addEventListener('input', () => { checkPwd(); checkMatch(); });
  confirm?.addEventListener('input', checkMatch);
  checkPwd(); checkMatch();
}

/* Init de paginación */
window.initPuestosPager = function initPuestosPager(rootEl) {
  const wrap = rootEl || document.getElementById('printArea');
  if (!wrap) return;

  const pageSize = 9;
  // const $tbody = wrap.querySelector('#tblPuestos tbody');
  const $tbody = wrap.querySelector('#tblNumPaginador tbody');
  const rows = Array.from($tbody?.querySelectorAll('tr') || []);
  const $pager = wrap.querySelector('#pager');
  const $info = wrap.querySelector('#infoRows');
  let page = 1;

  function render(toPage) {
    page = toPage ?? page;
    const total = rows.length;
    const pages = Math.max(1, Math.ceil(total / pageSize));
    if (page > pages) page = pages;

    rows.forEach(tr => tr.style.display = 'none');
    const start = (page - 1) * pageSize;
    rows.slice(start, start + pageSize).forEach(tr => tr.style.display = '');

    const first = total ? start + 1 : 0;
    const last = Math.min(start + pageSize, total);
    if ($info) $info.textContent = `Mostrando ${first}-${last} de ${total}`;
    drawPager(pages);
  }

  function drawPager(pages) {
    if (!$pager) return;
    const mk = (label, p, disabled = false, active = false) => {
      const li = document.createElement('li');
      li.className = `page-item${disabled ? ' disabled' : ''}${active ? ' active' : ''}`;
      const a = document.createElement('a');
      a.className = 'page-link'; a.href = '#'; a.textContent = label;
      a.addEventListener('click', ev => { ev.preventDefault(); if (!disabled && !active) render(p); });
      li.appendChild(a);
      return li;
    };
    $pager.innerHTML = '';
    const pagesCount = pages;
    $pager.appendChild(mk('«', 1, page === 1));
    $pager.appendChild(mk('‹', page - 1, page === 1));
    const range = 2;
    const start = Math.max(1, page - range);
    const end = Math.min(pagesCount, page + range);
    if (start > 1) $pager.appendChild(mk('1', 1, false, page === 1));
    if (start > 2) $pager.appendChild(mk('…', page, true));
    for (let p = start; p <= end; p++) $pager.appendChild(mk(String(p), p, false, p === page));
    if (end < pagesCount - 1) $pager.appendChild(mk('…', page, true));
    if (end < pagesCount) $pager.appendChild(mk(String(pagesCount), pagesCount, false, p === pagesCount));
    $pager.appendChild(mk('›', page + 1, page === pagesCount));
    $pager.appendChild(mk('»', pagesCount, page === pagesCount));
  }

  render(1);
};

window.swapContentIntoHost = function (html) {
  const host = document.getElementById('contentHost');
  if (!host) return;
  host.innerHTML = html;

  host.querySelectorAll('script').forEach(old => {
    const s = document.createElement('script');
    if (old.src) { s.src = old.src; s.async = false; }
    else { s.text = old.textContent; }
    document.head.appendChild(s);
    old.remove();
  });

  window.scrollTo(0, 0);
};
</script>


</body>
</html>
