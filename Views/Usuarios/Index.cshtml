@model IEnumerable<PIOGHOASIS.Models.Entities.Usuario>
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    if (ViewBag.IsPartial == true) { Layout = null; }

    var q = Context.Request.Query;
    var qCodigo = q["codigo"].ToString();
    var qNombre = q["nombre"].ToString();
    var qRol = q["rol"].ToString();             // ← rol como texto
    var qEstado = q.ContainsKey("estado") ? q["estado"].ToString() : "1";

    var roles = ViewBag.Roles as IEnumerable<SelectListItem> ?? Enumerable.Empty<SelectListItem>();
}
<style>
    .puestos-ui {
        position: relative;
        margin-top: 0;
        width: 100%;
        min-height: calc(100vh - var(--header-h));
        background: linear-gradient(rgba(255,255,255,.30), rgba(255,255,255,.30)), url('/img/dashboard/FondoDashboard.jpg') center/cover no-repeat #000;
        overflow: hidden;
        padding: 30px;
    }

        .puestos-ui .card-filtros {
            background: rgba(255,255,255,.85);
            box-shadow: 0 6px 22px rgba(0,0,0,.08);
            border: 1px solid rgba(0,0,0,.06);
            border-radius: .75rem;
        }

        .puestos-ui .tt {
            font-size: clamp(1.25rem,1.8vw,1.75rem);
            font-weight: 800;
            color: #1f2a37;
        }

        .puestos-ui .btn-nuevo {
            background: #f0a100;
            border: none;
            color: #222;
            font-weight: 800;
            box-shadow: 0 10px 22px rgba(240,161,0,.35);
        }

            .puestos-ui .btn-nuevo:hover {
                background: #db9400;
            }

        .puestos-ui table {
            background: #fff;
        }

        .puestos-ui thead th {
            background: #f3c259;
            color: #222;
            border-bottom: 2px solid #d7a536;
            vertical-align: middle;
        }

        .puestos-ui tbody td {
            vertical-align: middle;
        }

        .puestos-ui .pill {
            display: inline-block;
            padding: .15rem .5rem;
            border-radius: 999px;
            font-size: .84rem;
            font-weight: 700;
        }

        .puestos-ui .pill-ok {
            background: #e8f7e9;
            color: #16803d;
            border: 1px solid #bfe8c2;
        }

        .puestos-ui .pill-off {
            background: #fff0f0;
            color: #b42318;
            border: 1px solid #f5c2c7;
        }

        .puestos-ui .btn-icon {
            --bs-btn-padding-y: .25rem;
            --bs-btn-padding-x: .45rem;
            --bs-btn-border-radius: .35rem;
        }

        .puestos-ui .btn-edit {
            color: #0d6efd;
            border-color: #cfe2ff;
            background: #eff6ff;
        }

        .puestos-ui .btn-detail {
            color: #0aa2c0;
            border-color: #beeaf3;
            background: #e7f9fd;
        }

        .puestos-ui .btn-delete {
            color: #dc3545;
            border-color: #f1c2c6;
            background: #fff1f2;
        }

            .puestos-ui .btn-edit:hover, .puestos-ui .btn-detail:hover, .puestos-ui .btn-delete:hover {
                filter: brightness(.95);
            }

        .puestos-ui .pagination .page-link {
            border: none;
        }

        .puestos-ui .pagination .active > .page-link {
            background: #f0a100;
            color: #222;
        }

        .puestos-ui .clearable {
            position: relative;
        }

            .puestos-ui .clearable .btn-clear {
                position: absolute;
                right: .35rem;
                top: 50%;
                transform: translateY(-50%);
                border: none;
                background: transparent;
                color: #6c757d;
                display: none;
            }

            .puestos-ui .clearable input:not(:placeholder-shown) + .btn-clear {
                display: block;
            }

    @@media print {
        body * {
            visibility: hidden;
        }

        #printArea, #printArea * {
            visibility: visible;
        }

        #printArea {
            position: fixed;
            inset: 0;
        }
    }

    .empty-state {
        min-height: 320px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }

    .empty-illus {
        max-width: 160px;
        opacity: .85;
    }
</style>

<div class="puestos-ui">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="tt mb-0">Listado de Usuarios</h2>
        <a class="btn btn-nuevo ajax-nav" href="/Usuarios/Create" data-url="/Usuarios/Create">
            <i class="bi bi-plus-circle me-1"></i> Nuevo Usuario
        </a>
    </div>

    <!-- Filtros -->
    <div class="card-filtros p-3 mb-3">
        <form id="frmFiltros" class="row g-3 align-items-end"
              data-endpoint="/Usuarios/Index" data-report="/Usuarios/ExportPdf">

            <div class="col-12 col-md-3">
                <label class="form-label fw-semibold">Código</label>
                <div class="clearable">
                    <input type="text" class="form-control" id="fCodigo" placeholder=" " value="@qCodigo" />
                    <button type="button" class="btn-clear" aria-label="Limpiar"
                            onclick="this.previousElementSibling.value='';this.previousElementSibling.dispatchEvent(new Event('input'));">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
            </div>

            <div class="col-12 col-md-3">
                <label class="form-label fw-semibold">Nombre</label>
                <div class="clearable">
                    <input type="text" class="form-control" id="fNombre" placeholder="Usuario o nombre completo" value="@qNombre" />
                    <button type="button" class="btn-clear" aria-label="Limpiar"
                            onclick="this.previousElementSibling.value='';this.previousElementSibling.dispatchEvent(new Event('input'));">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
            </div>

            <div class="col-12 col-md-3">
                <label class="form-label fw-semibold">Rol</label>
                <div class="clearable">
                    <input type="text" class="form-control" id="fRol" placeholder="Nombre o código de rol" value="@qRol" list="rolesList" />
                    <button type="button" class="btn-clear" aria-label="Limpiar"
                            onclick="this.previousElementSibling.value='';this.previousElementSibling.dispatchEvent(new Event('input'));">
                        <i class="bi bi-x-circle"></i>
                    </button>
                    <datalist id="rolesList">
                        @foreach (var r in roles)
                        {
                            <option value="@r.Text"></option>
                            <option value="@r.Value"></option>
                        }
                    </datalist>
                </div>
            </div>

            <div class="col-12 col-md-3">
                <label class="form-label fw-semibold">Estado</label>
                <select id="fEstado" class="form-select">
                    <option value="" selected="@(qEstado==""  ? "selected" : null)">Todos</option>
                    <option value="1" selected="@(qEstado=="1" ? "selected" : null)">Activo</option>
                    <option value="0" selected="@(qEstado=="0" ? "selected" : null)">Inactivo</option>
                </select>
            </div>

            <div class="col-12 col-md-1 d-none d-md-flex">
                <button type="button" id="btnPrint" class="btn btn-outline-secondary" title="Imprimir">
                    <i class="bi bi-printer"></i>
                </button>
            </div>
        </form>
    </div>

    <!-- Tabla / vacío -->
    <div id="printArea" class="card p-0">
        @if (!Model.Any())
        {
            <div class="empty-state p-5 text-center">
                <img src="~/img/empty-search.svg" asp-append-version="true" class="mb-3 empty-illus" alt="Sin resultados" onerror="this.style.display='none'" />
                <h5 class="fw-bold mb-1">No se encontró ningún registro</h5>
                <p class="text-muted mb-3">Ajusta los filtros o limpia la búsqueda.</p>
                <button type="button" class="btn btn-outline-secondary js-clear-filters">
                    <i class="bi bi-eraser me-1"></i> Limpiar filtros
                </button>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table id="tblUsuarios" class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th style="width:140px">Código</th>
                            <th style="width:220px">Nombre</th>
                            <th style="width:300px">Nombre Completo</th>
                            <th style="width:180px">Rol</th>
                            <th style="width:120px">Estado</th>
                            <th style="width:150px" class="text-center">Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var u in Model)
                        {
                            var p = u.Empleado?.Persona;
                            var nombreCompleto = string.Join(" ", new[] { p?.PrimerNombre, p?.SegundoNombre, p?.PrimerApellido, p?.SegundoApellido }.Where(x => !string.IsNullOrWhiteSpace(x)));

                            <tr data-codigo="@u.UsuarioID" data-nombre="@u.UsuarioNombre" data-estado="@(u.Estado ? "1" : "0")">
                                <td>@u.UsuarioID</td>
                                <td>@u.UsuarioNombre</td>
                                <td>@nombreCompleto</td>
                                <td>@(u.Rol?.Nombre ?? "—")</td>
                                <td>
                                    @(u.Estado
                                        ? Html.Raw("<span class=\"pill pill-ok\">Activo</span>")
                                        : Html.Raw("<span class=\"pill pill-off\">Inactivo</span>"))
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <a class="btn btn-sm btn-outline-primary btn-icon btn-edit ajax-nav" href="/Usuarios/Edit/@u.UsuarioID" data-url="/Usuarios/Edit/@u.UsuarioID" title="Editar"><i class="bi bi-pencil-square"></i></a>
                                        <a class="btn btn-sm btn-outline-info    btn-icon btn-detail ajax-nav" href="/Usuarios/Details/@u.UsuarioID" data-url="/Usuarios/Details/@u.UsuarioID" title="Detalles"><i class="bi bi-eye"></i></a>
                                        @if (u.Estado)
                                        {
                                            <a class="btn btn-sm btn-outline-danger  btn-icon btn-delete ajax-nav" href="/Usuarios/Delete/@u.UsuarioID" data-url="/Usuarios/Delete/@u.UsuarioID" title="Desactivar"><i class="bi bi-trash"></i></a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center p-2">
                <div class="small text-muted"><span id="infoRows"></span></div>
                <nav><ul id="pager" class="pagination mb-0"></ul></nav>
            </div>
        }
    </div>
</div>

<script>
    (function () {
        const fCodigo = document.getElementById('fCodigo');
        const fNombre = document.getElementById('fNombre');
        const fRol = document.getElementById('fRol');     // ← input de texto
        const fEstado = document.getElementById('fEstado');

        function buildUrl() {
            const qs = new URLSearchParams();
            const cod = (fCodigo?.value || '').trim();
            const nom = (fNombre?.value || '').trim();
            const rol = (fRol?.value || '').trim();
            const est = (fEstado?.value ?? '');

            if (cod) qs.set('codigo', cod);
            if (nom) qs.set('nombre', nom);
            if (rol) qs.set('rol', rol);       // ← ahora sí viaja en la URL
            qs.set('estado', est);

            return '/Usuarios/Index' + (qs.toString() ? '?' + qs.toString() : '');
        }

        function debounce(fn, ms = 700) { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), ms); }; }
        const go = debounce(async () => {
            const url = buildUrl();

            const active = document.activeElement, id = active?.id;
            const s1 = ('selectionStart' in active) ? active.selectionStart : null;
            const s2 = ('selectionEnd' in active) ? active.selectionEnd : null;

            await window.swapInHost(url, '#printArea');        // recarga parcial
            history.replaceState(null, '', url);
            window.initPuestosPager(document.getElementById('printArea'));

            if (id) {
                const el = document.getElementById(id);
                if (el) { el.focus(); if (s1 != null && s2 != null) el.setSelectionRange(s1, s2); }
            }
        }, 700);

        function onText() {
            const v = this.value.trim();
            if (v.length === 0 || v.length >= 2) go();  // evita requests con 1 char
        }

        fCodigo?.addEventListener('input', onText);
        fNombre?.addEventListener('input', onText);
        fRol?.addEventListener('input', onText);   // ← CLAVE
        fEstado?.addEventListener('change', go);

        document.getElementById('btnPrint')?.addEventListener('click', () => {
            const url = buildUrl().replace('/Index', '/ExportPdf');
            window.open(url, '_blank');
        });

        window.addEventListener('DOMContentLoaded', () => {
            window.initPuestosPager(document.getElementById('printArea'));
        });

        // limpiar filtros desde empty-state
        document.getElementById('printArea')?.addEventListener('click', (ev) => {
            const btn = ev.target.closest('.js-clear-filters'); if (!btn) return;
            fCodigo.value = ''; fNombre.value = ''; fRol.value = ''; fEstado.value = '';
            fCodigo.dispatchEvent(new Event('input'));
            fNombre.dispatchEvent(new Event('input'));
            fRol.dispatchEvent(new Event('input'));
            fEstado.dispatchEvent(new Event('change'));
        });
    })();
</script>
